{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","poster","alt","src","title","className","MovieGenre","genre","Movie","genres","synopsis","map","index","key","text","maxLine","ellipsis","trimRight","basedOn","App","state","_getMovies","a","_callApi","movies","setState","fetch","then","poto","json","data","catch","err","console","log","_renderMovies","movie","title_english","large_cover_image","id","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8UAoDA,SAASA,EAAT,GAAuC,IAAhBC,EAAe,EAAfA,OAAQC,EAAO,EAAPA,IAC7B,OAAO,yBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKG,UAAU,kBAG3D,SAASC,EAAT,GAAgC,IAAVC,EAAS,EAATA,MACpB,OAAO,0BAAMF,UAAU,gBAAgBE,GAiC1BC,MAjEf,YAAqD,IAApCJ,EAAmC,EAAnCA,MAAOH,EAA4B,EAA5BA,OAAQQ,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SACtC,OACE,yBAAKL,UAAU,SACb,yBAAKA,UAAU,iBACb,kBAACL,EAAD,CAAaC,OAAQA,EAAQC,IAAKE,KAEpC,yBAAKC,UAAU,iBACb,4BAAKD,GACL,yBAAKC,UAAU,iBACZI,EAAOE,KAAI,SAACJ,EAAOK,GAAR,OACV,kBAACN,EAAD,CAAYC,MAAOA,EAAOM,IAAKD,QAGnC,yBAAKP,UAAU,mBACb,kBAAC,IAAD,CACES,KAAMJ,EACNK,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCoELC,E,4MA9DbC,MAAQ,G,EAURC,W,sBAAa,4BAAAC,EAAA,sEACU,EAAKC,WADf,OACLC,EADK,OAEX,EAAKC,SAAS,CACZD,OAAQA,IAHC,2C,EAObD,SAAW,WAET,OAAOG,MACL,iEAECC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACE,GAAD,OAAUA,EAAKC,KAAKN,UACzBO,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,O,EAGhCG,cAAgB,WAYd,OAXe,EAAKf,MAAMI,OAAOb,KAAI,SAACyB,GACpC,OACE,kBAAC,EAAD,CACEhC,MAAOgC,EAAMC,cACbpC,OAAQmC,EAAME,kBACdzB,IAAKuB,EAAMG,GACX9B,OAAQ2B,EAAM3B,OACdC,SAAU0B,EAAM1B,e,gHA5BtB8B,KAAKnB,e,+BAmCE,IAECG,EAAWgB,KAAKpB,MAAhBI,OACR,OACE,yBAAKnB,UAAWmB,EAAS,MAAQ,gBAC9BA,EAASgB,KAAKL,gBAAkB,e,GApDvBM,aCjCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdzB,OAAM,SAAA0B,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.2fdbafef.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport LinesEllipsis from \"react-lines-ellipsis\";\r\nimport \"./Movie.css\";\r\n\r\n/*\r\nclass Movie extends Component{\r\n\r\n    static propTypes ={\r\n        title: PropTypes.string.isRequired,\r\n        poster: PropTypes.string.isRequired\r\n    }\r\n    render(){\r\n        //console.log(this.props);\r\n\r\n        return(\r\n            <div>\r\n                <MoviePoster poster={this.props.poster}/>\r\n                        <h1>{this.props.title}</h1>             \r\n            </div>\r\n            \r\n        )        \r\n    }\r\n}\r\n*/\r\nfunction Movie({ title, poster, genres, synopsis }) {\r\n  return (\r\n    <div className=\"Movie\">\r\n      <div className=\"Movie__Column\">\r\n        <MoviePoster poster={poster} alt={title} />\r\n      </div>\r\n      <div className=\"Movie__Column\">\r\n        <h1>{title}</h1>\r\n        <div className=\"Movie__Genres\">\r\n          {genres.map((genre, index) => (\r\n            <MovieGenre genre={genre} key={index} />\r\n          ))}\r\n        </div>\r\n        <div className=\"Movie__Synopsis\">\r\n          <LinesEllipsis\r\n            text={synopsis}\r\n            maxLine=\"3\"\r\n            ellipsis=\"...\"\r\n            trimRight\r\n            basedOn=\"letters\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MoviePoster({ poster, alt }) {\r\n  return <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />;\r\n}\r\n\r\nfunction MovieGenre({ genre }) {\r\n  return <span className=\"Movie__Genre\">{genre}</span>;\r\n}\r\n\r\nMovie.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.array.isRequired,\r\n  synopsis: PropTypes.string.isRequired,\r\n};\r\n\r\nMoviePoster.propTypes = {\r\n  poster: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired,\r\n};\r\n\r\nMovieGenre.propTypes = {\r\n  genre: PropTypes.string.isRequired,\r\n};\r\n\r\n/*\r\nclass MoviePoster extends Component{\r\n    static propTypes = {\r\n        poster: PropTypes.string.isRequired\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <img src={this.props.poster} alt=\"description\"/>\r\n        )\r\n    }\r\n}\r\n*/\r\n\r\nexport default Movie;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Movie from \"./Movie\";\n\n/*\nconst movieTitles = [\n  \"Matrix\",\n  \"Full Metal Jacket\",\n  \"Old Boy\",\n  \"Star Wars\"\n]\n\nconst movieImages = [\n  \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTXam6ak80mnJcrmAZMBBH2YZgkv4OBkdfGTG-akZPghbQ6LqcS&usqp=CAU\",\n  \"https://i.pinimg.com/originals/56/bd/4f/56bd4f5a31ec7ed89b45feb34bc15ccd.jpg\",\n  \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTPqo2_sxcdHrjnfYmvKUQJVlzST1t3M_zfy3WWsC7T6knUbZTe&usqp=CAU\",\n  \"https://lh3.googleusercontent.com/proxy/YHpxSvdgdVLcgge4nC_fbxYh2YmMrTid0ncv2075faDxkweeTeu1KKDElvrPT2bKk7dWnAETPm11bp80yDnJmv7q_pvrVNhYXG88Ur0mw6CHx9fBpiMR7Q\"\n]\n*/\n/*\nconst movies = [\n  {\n    // id: 1,\n    title: \"Matrix\",\n    poster: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTXam6ak80mnJcrmAZMBBH2YZgkv4OBkdfGTG-akZPghbQ6LqcS&usqp=CAU\"\n  },\n  {\n    // id: 2,\n    title: \"Full Metal Jacket\",\n    poster: \"https://i.pinimg.com/originals/56/bd/4f/56bd4f5a31ec7ed89b45feb34bc15ccd.jpg\"\n  },\n  {\n    // id: 3,\n    title: \"Old Boy\",\n    poster: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTPqo2_sxcdHrjnfYmvKUQJVlzST1t3M_zfy3WWsC7T6knUbZTe&usqp=CAU\"\n  },\n  {\n    // id: 4,\n    title: \"Star Wars\",\n    poster: \"https://lh3.googleusercontent.com/proxy/YHpxSvdgdVLcgge4nC_fbxYh2YmMrTid0ncv2075faDxkweeTeu1KKDElvrPT2bKk7dWnAETPm11bp80yDnJmv7q_pvrVNhYXG88Ur0mw6CHx9fBpiMR7Q\"\n  }\n]\n*/\n\n//function App() {\nclass App extends Component {\n  // Render : componentWillMount() -> render() -> componentDidMount()\n  // Update :\n\n  // eslint-disable-next-line no-undef\n  state = {};\n\n  componentWillMount() {\n    //console.log(\"componentWillMount() has been called\")\n  }\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies: movies,\n    });\n  };\n\n  _callApi = () => {\n    // console.log(fetch('https://yts.ag/api/v2/list_movies.json?sort_by=rating'))\n    return fetch(\n      \"https://yts.mx/api/v2/list_movies.json?sort_by=download_count\"\n    )\n      .then((poto) => poto.json())\n      .then((json) => json.data.movies)\n      .catch((err) => console.log(err));\n  };\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie) => {\n      return (\n        <Movie\n          title={movie.title_english}\n          poster={movie.large_cover_image}\n          key={movie.id}\n          genres={movie.genres}\n          synopsis={movie.synopsis}\n        />\n      );\n    });\n    return movies;\n  };\n\n  render() {\n    //console.log(\"render() has been called\")\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {movies ? this._renderMovies() : \"Loading\"}\n        {/* \n        <Movie title={movieTitles[0]} poster={movieImages[0]}/>\n        <Movie title={movieTitles[1]} poster={movieImages[1]}/>\n        <Movie title={movieTitles[2]} poster={movieImages[2]}/>\n        <Movie title={movieTitles[3]} poster={movieImages[3]}/>\n        */}\n        {/*this.state.movies.map((movie, index) => {\n          return <Movie title={movie.title} poster={movie.poster} key={index} />\n        })*/}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}